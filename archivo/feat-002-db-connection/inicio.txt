Necesito adaptar un proyecto que tenía corriendo con una BD MS SQL server (local, corría yo todo el programa) a otra BD que tendrá que correr con un servicio web contenerizado. 

En mi programa original: 

./
│   ├── ' --all
│   ├── .env
│   ├── .gitignore
│   ├── 1_cargar_imputaciones.py
│   ├── 2_cargar_tareas_sap.py
│   ├── 3_gestion_tabla_central.py
│   ├── 4_procesar_respuesta_sap.py
│   ├── 5_cargar_feedback.py
│   ├── __init__.py
│   ├── alembic.ini
│   ├── app.py
│   ├── app_prueba.py
│   ├── readme.md
│   ├── requirements.txt
│   ├── tash list
├── .vscode/
│   │   ├── launch.json
│   │   ├── settings.json
├── alembic/
│   │   ├── README
│   │   ├── env.py
│   │   ├── script.py.mako
│   ├── versions/
│   │   │   ├── 0273f724db45_1_1_optional_entre_imputaciones_y_.py
│   │   │   ├── 0a665fd4565a_añadir_tipos_de_imputaciones_xx_gg_o_cn.py
│   │   │   ├── 150d19fc3cdc_añadir_campo_cargado_tarea_real_y_.py
│   │   │   ├── 2b980b53ad6b_añadir_campo_timestampinput_a_.py
│   │   │   ├── 397943659c03_borrar_tabla_gg_orders.py
│   │   │   ├── 3f5073e71d07_añadir_timestamps_a_transaccionales.py
│   │   │   ├── 473635d290de_nullable_false_para_extraciclos_.py
│   │   │   ├── 5154326e35aa_migracion_inicial.py
│   │   │   ├── 8d15cf072789_cambiar_la_longitud_de_centrotrabajo.py
│   │   │   ├── 8f928a8a99b4_relacion_centrotrabajo_area.py
│   │   │   ├── a5295bc970b9_columna_activeorder_en_saporders_para_.py
│   │   │   ├── a7657aca28f9_tablas_gg.py
│   │   │   ├── b8b5d58d0e8e_adición_de_la_tabla_extraciclos_y_.py
│   │   │   ├── be3b2ec4537d_añadiendo_columna_tareaasoc_en_.py
│   │   │   ├── f0d76de0d454_añadir_tipoindirecto_y_tipomotivo_a_.py
├── app/
│   │   ├── __init__.py
│   ├── api/
│   │   ├── endpoints/
│   ├── core/
│   │   │   ├── __init__.py
│   │   │   ├── config.py
│   ├── db/
│   │   │   ├── __init__.py
│   │   │   ├── base.py
│   │   │   ├── session.py
│   │   │   ├── test_connection.py
│   ├── models/
│   │   │   ├── __init__.py
│   │   │   ├── models.py
│   ├── schemas/
│   ├── service/
│   │   │   ├── __init__.py
│   │   ├── amendments/
│   │   │   │   ├── borrado duplicados sin asociados.sql
│   │   │   │   ├── seleccion de duplicados.sql
│   │   ├── diccionarios/
│   │   │   │   ├── __init__.py
│   │   │   │   ├── _utils.py
│   │   │   │   ├── rellenar_datos_dicconarios.py
│   │   ├── etl/
│   │   │   │   ├── __init__.py
│   │   │   │   ├── _load_datos_excel.py
│   │   │   │   ├── extraer_datos_excel.py
│   │   │   │   ├── load_datos_excel.py
│   │   │   │   ├── transformar_datos_excel.py
│   │   │   ├── logs/
│   │   │   │   │   ├── load_errors.log
│   │   │   │   │   ├── prueba.ipynb
│   │   ├── feedback/
│   │   │   │   ├── __init__.py
│   │   │   │   ├── cargar_feedback.py
│   │   ├── generacion_excel_mass_upload/
│   │   │   │   ├── __init__.py
│   │   │   │   ├── _utils.py
│   │   │   │   ├── generacion_excel.py
│   │   │   ├── tmp/
│   │   │   │   │   ├── mass_upload_20231221_162257.xlsx
│   │   │   │   │   ├── mass_upload_20231221_162434.xlsx
│   │   ├── rellenado_bd/
│   │   │   │   ├── __init__.py
│   │   │   │   ├── generar_AreaTarea.py
│   │   │   │   ├── importar_ordenes_gg.txt
│   │   │   │   ├── rellenado_extraciclos.py
│   │   ├── sap_etl/
│   │   │   │   ├── __init__.py
│   │   │   │   ├── _utils.py
│   │   │   │   ├── a_extract.py
│   │   │   │   ├── b_transform.py
│   │   │   │   ├── c_load.py
│   │   │   ├── tmp/
│   │   │   │   │   ├── 1-extract.pickle
│   │   │   │   │   ├── 2-SapOrders-prueba-primera-fila.pickle
│   │   │   │   │   ├── 2-SapOrders-prueba.pickle
│   │   │   │   │   ├── 2-SapOrders.pickle
│   │   │   │   │   ├── Ordenes TECO.xlsx
│   │   │   │   │   ├── tmp.xlsx
│   │   │   │   │   ├── vista.ipynb
│   │   │   │   ├── backup/
│   │   │   │   │   │   ├── 1-extract.pickle
│   │   ├── sap_response_handling/
│   │   │   │   ├── __init__.py
│   │   │   │   ├── _utils.py
│   │   │   │   ├── actualizar_cargado_sap.py
│   │   ├── sharepoint/
│   │   │   │   ├── __init__.py
│   │   │   │   ├── descarga_imputaciones.py
│   │   ├── tabla_central/
│   │   │   │   ├── __init__.py
│   │   │   │   ├── _d_asignar_fueras_sistema.py
│   │   │   │   ├── _generacion_tabla_central.py
│   │   │   │   ├── _utils.py
│   │   │   │   ├── a_generacion_tabla_preliminar.py
│   │   │   │   ├── b_separacion_imputaciones_validas.py
│   │   │   │   ├── b_separacion_imputaciones_validas_original.py
│   │   │   │   ├── c_1_cargar_imputaciones_a_tabla_central.py
│   │   │   │   ├── c_2_generar_aviso_liberacion_ordenes.py
│   │   │   │   ├── d_asignar_fueras_sistema.py
│   │   │   │   ├── gestion_tabla_central.py
│   │   ├── ui/
│   │   │   │   ├── __init__.py
│   │   │   │   ├── _interface_utils.py
│   ├── test/
│   │   │   ├── test_manual.txt
├── build/
│   ├── app/
│   │   │   ├── Analysis-00.toc
│   │   │   ├── EXE-00.toc
│   │   │   ├── PKG-00.toc
│   │   │   ├── PYZ-00.pyz
│   │   │   ├── PYZ-00.toc
│   │   │   ├── Tree-00.toc
│   │   │   ├── Tree-01.toc
│   │   │   ├── Tree-02.toc
│   │   │   ├── app.pkg
│   │   │   ├── base_library.zip
│   │   │   ├── warn-app.txt
│   │   │   ├── xref-app.html
│   │   ├── localpycs/
│   │   │   │   ├── pyimod01_archive.pyc
│   │   │   │   ├── pyimod02_importers.pyc
│   │   │   │   ├── pyimod03_ctypes.pyc
│   │   │   │   ├── pyimod04_pywin32.pyc
│   │   │   │   ├── struct.pyc
│   ├── app_prueba/
│   │   │   ├── Analysis-00.toc
│   │   │   ├── EXE-00.toc
│   │   │   ├── PKG-00.toc
│   │   │   ├── PYZ-00.pyz
│   │   │   ├── PYZ-00.toc
│   │   │   ├── Tree-00.toc
│   │   │   ├── Tree-01.toc
│   │   │   ├── Tree-02.toc
│   │   │   ├── app_prueba.pkg
│   │   │   ├── base_library.zip
│   │   │   ├── warn-app_prueba.txt
│   │   │   ├── xref-app_prueba.html
│   │   ├── localpycs/
│   │   │   │   ├── pyimod01_archive.pyc
│   │   │   │   ├── pyimod02_importers.pyc
│   │   │   │   ├── pyimod03_ctypes.pyc
│   │   │   │   ├── pyimod04_pywin32.pyc
│   │   │   │   ├── struct.pyc


tengo todos los modelos en models.py y todas las migraciones se corrieron con alembic, está todo en la carpeta alembic/versions.

Mi programa original lo corro yo todos los días y es una pérdida de tiempo, el nuevo servicio web lo correrá un compañero. Para ello, tengo que hacer que el programa funcione con una base de datos, pero como ahora el servicio a correr en la web irá en un server redhat, he pensado en usar una postresql. 

Para ello, tendré que: 

Tener disponible la base de datos tanto en dev como en prod
Poder correr las migraciones exactamente igual que lo que tengo ahora en prod
Actualmente ya accedo mediante ORM a la BD, tal vez esto facilite la migración: 

# PATH: app/db/session.py

# app/db/session.py

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker, scoped_session
from app.core.config import Config

config = Config()

engine = create_engine(config.get_connection_string())
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
session = scoped_session(SessionLocal)

# generador que crea una nueva sesión cuando se invoca y la cierra cuando ya no se necesita. Al usar scoped_session, garantizas que la sesión será única por cada hilo o solicitud, lo que es útil para aplicaciones web.

def get_db():
    db = session()
    try:
        yield db
    finally:
        db.close()

class DatabaseSession:
    def __init__(self, session):
        self.session = session

    def __enter__(self):
        self.db = self.session()
        return self.db

    def __exit__(self, exc_type, exc_value, traceback):
        self.db.close()

database_session = DatabaseSession(session)

# PATH: app/models/models.py

from sqlalchemy import Column, Integer, String, Float, Date, Boolean, ForeignKey, event, DateTime
from datetime import datetime, timezone
from sqlalchemy.dialects.postgresql import BIGINT
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship

Base = declarative_base()

class Imputaciones(Base):
    __tablename__ = 'Imputaciones'
    
    ID = Column(BIGINT, primary_key=True, index=True)
    FechaImp = Column(Date)
    CodEmpleado = Column(String)
    Timpu = Column(String)
    Horas = Column(Float)
    Proyecto = Column(String(255), ForeignKey('Projects_Dictionary.ProyectoBaan'))
    TipoCoche = Column(String)
    NumCoche = Column(String)
    CentroTrabajo = Column(String(32))
    Tarea = Column(String)
    TareaAsoc = Column(String)
    TipoIndirecto = Column(String)
    TipoMotivo = Column(String)
    TimestampInput = Column(DateTime, nullable=True, default=lambda: datetime.now(timezone.utc))
    TipoImput = Column(String(2), ForeignKey("TiposOrdenes.TipoOrden"), nullable=True)
    AreaTarea = Column(String(64), ForeignKey('Extraciclos.AreaTarea'), nullable=True)
    area_id = Column(String(32), ForeignKey('Areas.CentroTrabajo'))

... ETC.

En mi nuevo proyecto:

./
│   ├── .env
│   ├── .gitignore
│   ├── LICENSE
│   ├── README.md
│   ├── docker-compose.override.yml
│   ├── docker-compose.prod.yml
│   ├── docker-compose.yml
├── .vscode/
│   │   ├── launch.json
│   │   ├── settings.json
├── archivo/
│   │   ├── diagrama_dev.png
│   ├── feat-001-proyecto-parametrico/
│   │   │   ├── proyecto-parametrico-dev.txt
│   │   │   ├── segundo intento.txt
│   ├── feat-002-db-connection/
│   │   │   ├── inicio.txt
├── backend/
│   │   ├── .dockerignore
│   │   ├── Dockerfile
│   │   ├── requirements.txt
│   ├── app/
│   │   │   ├── __init__.py
│   │   │   ├── main.py
│   │   ├── api/
│   │   │   │   ├── __init__.py
│   │   │   ├── routes/
│   │   │   │   │   ├── cnc.py
│   │   │   │   │   ├── escaneos.py
│   │   │   │   │   ├── health.py
│   │   │   │   │   ├── imputaciones_ip.py
│   │   │   │   │   ├── upload.py
│   │   ├── core/
│   │   │   │   ├── __init__.py
│   │   │   │   ├── sse_manager.py
│   │   ├── services/
│   │   │   │   ├── __init__.py
│   │   │   │   ├── cnc_processor.py
│   │   │   │   ├── file_processor.py
│   │   │   │   ├── imputaciones_ip_processor.py
│   │   │   │   ├── seguimiento_escaneos_service.py
│   │   │   │   ├── validation_imputaciones_service.py
│   │   │   ├── imputaciones_ip/
│   │   │   │   │   ├── __init__.py
│   │   │   │   │   ├── _constants_imputaciones.py
│   │   │   │   │   ├── _utils.py
│   │   │   │   │   ├── exporter.py
│   │   │   │   │   ├── loader.py
│   │   │   │   │   ├── transformer.py
│   │   │   ├── utils/
│   │   │   │   │   ├── __init__.py
│   │   │   │   │   ├── cnc_processor_utils.py
│   │   │   │   │   ├── escaneos_utils.py
│   ├── tests/
│   │   │   ├── test_health.py
│   ├── tmp/
│   │   │   ├── AVISOS_CALIDAD.xlsx
├── frontend/
│   │   ├── .dockerignore
│   │   ├── Dockerfile
│   │   ├── default.conf
│   │   ├── index.html
│   │   ├── package-lock.json
│   │   ├── package.json
│   │   ├── vite.config.js
│   ├── src/
│   │   │   ├── App.jsx
│   │   │   ├── main.jsx
│   │   │   ├── setupTests.js
│   │   ├── components/
│   │   │   │   ├── FileUploadChecker.jsx
│   │   │   │   ├── Header.jsx
│   │   │   │   ├── ImputacionesIPForm.jsx
│   │   │   │   ├── ImputacionesIPStatus.jsx
│   │   │   │   ├── SideNav.jsx
│   │   ├── contexts/
│   │   │   │   ├── PageContext.jsx
│   │   │   │   ├── ThemeContext.jsx
│   │   ├── hooks/
│   │   │   │   ├── useCNC.js
│   │   │   │   ├── useImputacionesIP.js
│   │   │   │   ├── useSSE.js
│   │   ├── pages/
│   │   │   │   ├── AgregarImputaciones.jsx
│   │   │   │   ├── CargarRespuestaSap.jsx
│   │   │   │   ├── GererarImputaciones.jsx
│   │   │   │   ├── Home.jsx
│   │   │   │   ├── ObtenerFeedback.jsx
│   │   │   │   ├── SubirArchivos.jsx
│   │   │   │   ├── SubirTecos.jsx
│   │   ├── routes/
│   │   │   │   ├── routesAuto.jsx
│   │   ├── services/
│   │   │   │   ├── healthService.js
│   │   │   │   ├── uploadCNCService.js
│   │   │   │   ├── uploadImputacionesService.js
│   │   │   │   ├── uploadService.js
│   │   ├── styles/
│   │   │   │   ├── main.css
│   │   ├── theme/
│   │   │   │   ├── index.js


# PATH: docker-compose.yml

services:
  frontend:
    container_name: "${SERVICE_NAME}-frontend"
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      SERVICE_NAME: "${SERVICE_NAME}"
      FRONTEND_PORT: "${FRONTEND_PORT}"
      BACKEND_PORT: "${BACKEND_PORT}"
    depends_on:
      - backend

  backend:
    container_name: "${SERVICE_NAME}-backend"
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      SERVICE_NAME: "${SERVICE_NAME}"
      BACKEND_PORT: "${BACKEND_PORT}"


# PATH: docker-compose.override.yml

services:
  frontend:
    build:
      target: dev
      args:
        SERVICE_NAME: "${SERVICE_NAME}"
        FRONTEND_PORT: "${FRONTEND_PORT}"
        BACKEND_PORT: "${BACKEND_PORT}"
        ENVIRONMENT: "development"
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT}"
    volumes:
      - ./frontend/src:/app/src
    environment:
      CHOKIDAR_USEPOLLING: "true"
      CHOKIDAR_INTERVAL: "1000"

  backend:
    build:
      args:
        SERVICE_NAME: "${SERVICE_NAME}"
        BACKEND_PORT: "${BACKEND_PORT}"
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
      - "5678:5678"
    volumes:
      - ./backend/app:/app/app
      - ./backend/tmp:/app/tmp
    command: ["python", "-m", "debugpy", "--listen", "0.0.0.0:5678", "-m", "uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "${BACKEND_PORT}", "--reload"]


Necesito adaptar el programa viejo al nuevo. Para ello, necesito un roadmap que creo que pasa por: 

Replicar la BD en postresql, aplicando las migraciones (en local)
Que docker/docker-compose lo tenga en cuenta y lo monte
Montar un mini-servicio de prueba para ver que se conecta bien

¿Me ayudas? 